"use strict";
/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindPreferenceProviderOverrides = exports.WorkspaceFilePreferenceProviderWithExtensions = exports.UserPreferenceProviderWithExtensions = exports.FolderPreferenceProviderWithExtensions = void 0;
var browser_1 = require("@theia/preferences/lib/browser");
var inversify_1 = require("@theia/core/shared/inversify");
var recommended_extensions_json_schema_1 = require("./recommended-extensions-json-schema");
var workspace_file_preference_provider_1 = require("@theia/preferences/lib/browser/workspace-file-preference-provider");
var preference_bindings_1 = require("@theia/preferences/lib/browser/preference-bindings");
var section_preference_provider_1 = require("@theia/preferences/lib/browser/section-preference-provider");
/**
 * The overrides in this file are required because the base preference providers assume that a
 * section name (extensions) will not be used as a prefix (extensions.ignoreRecommendations).
 */
var FolderPreferenceProviderWithExtensions = /** @class */ (function (_super) {
    __extends(FolderPreferenceProviderWithExtensions, _super);
    function FolderPreferenceProviderWithExtensions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FolderPreferenceProviderWithExtensions.prototype.getPath = function (preferenceName) {
        var path = _super.prototype.getPath.call(this, preferenceName);
        if (this.section !== 'extensions' || !(path === null || path === void 0 ? void 0 : path.length)) {
            return path;
        }
        var isExtensionsField = path[0] in recommended_extensions_json_schema_1.extensionsConfigurationSchema.properties;
        if (isExtensionsField) {
            return path;
        }
        return undefined;
    };
    FolderPreferenceProviderWithExtensions = __decorate([
        inversify_1.injectable()
    ], FolderPreferenceProviderWithExtensions);
    return FolderPreferenceProviderWithExtensions;
}(browser_1.FolderPreferenceProvider));
exports.FolderPreferenceProviderWithExtensions = FolderPreferenceProviderWithExtensions;
var UserPreferenceProviderWithExtensions = /** @class */ (function (_super) {
    __extends(UserPreferenceProviderWithExtensions, _super);
    function UserPreferenceProviderWithExtensions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UserPreferenceProviderWithExtensions.prototype.getPath = function (preferenceName) {
        var path = _super.prototype.getPath.call(this, preferenceName);
        if (this.section !== 'extensions' || !(path === null || path === void 0 ? void 0 : path.length)) {
            return path;
        }
        var isExtensionsField = path[0] in recommended_extensions_json_schema_1.extensionsConfigurationSchema.properties;
        if (isExtensionsField) {
            return path;
        }
        return undefined;
    };
    UserPreferenceProviderWithExtensions = __decorate([
        inversify_1.injectable()
    ], UserPreferenceProviderWithExtensions);
    return UserPreferenceProviderWithExtensions;
}(browser_1.UserPreferenceProvider));
exports.UserPreferenceProviderWithExtensions = UserPreferenceProviderWithExtensions;
var WorkspaceFilePreferenceProviderWithExtensions = /** @class */ (function (_super) {
    __extends(WorkspaceFilePreferenceProviderWithExtensions, _super);
    function WorkspaceFilePreferenceProviderWithExtensions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WorkspaceFilePreferenceProviderWithExtensions.prototype.belongsInSection = function (firstSegment, remainder) {
        if (firstSegment === 'extensions') {
            return remainder in recommended_extensions_json_schema_1.extensionsConfigurationSchema.properties;
        }
        return this.configurations.isSectionName(firstSegment);
    };
    WorkspaceFilePreferenceProviderWithExtensions = __decorate([
        inversify_1.injectable()
    ], WorkspaceFilePreferenceProviderWithExtensions);
    return WorkspaceFilePreferenceProviderWithExtensions;
}(workspace_file_preference_provider_1.WorkspaceFilePreferenceProvider));
exports.WorkspaceFilePreferenceProviderWithExtensions = WorkspaceFilePreferenceProviderWithExtensions;
function bindPreferenceProviderOverrides(bind, unbind) {
    unbind(browser_1.UserPreferenceProviderFactory);
    unbind(browser_1.FolderPreferenceProviderFactory);
    unbind(workspace_file_preference_provider_1.WorkspaceFilePreferenceProviderFactory);
    preference_bindings_1.bindFactory(bind, browser_1.UserPreferenceProviderFactory, UserPreferenceProviderWithExtensions, section_preference_provider_1.SectionPreferenceProviderUri, section_preference_provider_1.SectionPreferenceProviderSection);
    preference_bindings_1.bindFactory(bind, browser_1.FolderPreferenceProviderFactory, FolderPreferenceProviderWithExtensions, section_preference_provider_1.SectionPreferenceProviderUri, section_preference_provider_1.SectionPreferenceProviderSection, browser_1.FolderPreferenceProviderFolder);
    bind(workspace_file_preference_provider_1.WorkspaceFilePreferenceProviderFactory).toFactory(function (ctx) { return function (options) {
        var child = new inversify_1.Container({ defaultScope: 'Singleton' });
        child.parent = ctx.container;
        child.bind(workspace_file_preference_provider_1.WorkspaceFilePreferenceProvider).to(WorkspaceFilePreferenceProviderWithExtensions);
        child.bind(workspace_file_preference_provider_1.WorkspaceFilePreferenceProviderOptions).toConstantValue(options);
        return child.get(workspace_file_preference_provider_1.WorkspaceFilePreferenceProvider);
    }; });
}
exports.bindPreferenceProviderOverrides = bindPreferenceProviderOverrides;
//# sourceMappingURL=preference-provider-overrides.js.map