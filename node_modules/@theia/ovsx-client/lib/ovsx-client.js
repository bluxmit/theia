"use strict";
/********************************************************************************
 * Copyright (C) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OVSXClient = void 0;
var bent = require("bent");
var semver = require("semver");
var ovsx_types_1 = require("./ovsx-types");
var fetchText = bent('GET', 'string', 200);
var fetchJson = bent('GET', { 'Accept': 'application/json' }, 'json', 200);
var postJson = bent('POST', {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}, 'json', 200);
var OVSXClient = /** @class */ (function () {
    function OVSXClient(options) {
        this.options = options;
    }
    OVSXClient.prototype.search = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var searchUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildSearchUri(param)];
                    case 1:
                        searchUri = _a.sent();
                        return [2 /*return*/, this.fetchJson(searchUri)];
                }
            });
        });
    };
    OVSXClient.prototype.buildSearchUri = function (param) {
        return __awaiter(this, void 0, void 0, function () {
            var searchUri, query;
            return __generator(this, function (_a) {
                searchUri = '';
                if (param) {
                    query = [];
                    if (param.query) {
                        query.push('query=' + encodeURIComponent(param.query));
                    }
                    if (param.category) {
                        query.push('category=' + encodeURIComponent(param.category));
                    }
                    if (param.size) {
                        query.push('size=' + param.size);
                    }
                    if (param.offset) {
                        query.push('offset=' + param.offset);
                    }
                    if (param.sortOrder) {
                        query.push('sortOrder=' + encodeURIComponent(param.sortOrder));
                    }
                    if (param.sortBy) {
                        query.push('sortBy=' + encodeURIComponent(param.sortBy));
                    }
                    if (param.includeAllVersions) {
                        query.push('includeAllVersions=' + param.includeAllVersions);
                    }
                    if (query.length > 0) {
                        searchUri += '?' + query.join('&');
                    }
                }
                return [2 /*return*/, new URL("api/-/search" + searchUri, this.options.apiUrl).toString()];
            });
        });
    };
    OVSXClient.prototype.getExtension = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var apiUri, param, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiUri = new URL('api/-/query', this.options.apiUrl);
                        param = {
                            extensionId: id
                        };
                        return [4 /*yield*/, this.postJson(apiUri.toString(), param)];
                    case 1:
                        result = _a.sent();
                        if (result.extensions && result.extensions.length > 0) {
                            return [2 /*return*/, result.extensions[0]];
                        }
                        throw new Error("Extension with id " + id + " not found at " + apiUri);
                }
            });
        });
    };
    /**
     * Get all versions of the given extension.
     * @param id the requested extension id.
     */
    OVSXClient.prototype.getAllVersions = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var apiUri, param, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        apiUri = new URL('api/-/query', this.options.apiUrl);
                        param = {
                            extensionId: id,
                            includeAllVersions: true,
                        };
                        return [4 /*yield*/, this.postJson(apiUri.toString(), param)];
                    case 1:
                        result = _a.sent();
                        if (result.extensions && result.extensions.length > 0) {
                            return [2 /*return*/, result.extensions];
                        }
                        throw new Error("Extension with id " + id + " not found at " + apiUri);
                }
            });
        });
    };
    OVSXClient.prototype.fetchJson = function (url) {
        return fetchJson(url);
    };
    OVSXClient.prototype.postJson = function (url, payload) {
        return postJson(url, JSON.stringify(payload));
    };
    OVSXClient.prototype.fetchText = function (url) {
        return fetchText(url);
    };
    /**
     * Get the latest compatible extension version.
     * - a builtin extension is fetched based on the extension version which matches the API.
     * - an extension satisfies compatibility if its `engines.vscode` version is supported.
     * @param id the extension id.
     *
     * @returns the data for the latest compatible extension version if available, else `undefined`.
     */
    OVSXClient.prototype.getLatestCompatibleExtensionVersion = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var extensions, namespace, apiVersion, extensions_1, extensions_1_1, extension, extensions_2, extensions_2_1, extension;
            var e_1, _b, e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.getAllVersions(id)];
                    case 1:
                        extensions = _d.sent();
                        if (extensions.length === 0) {
                            return [2 /*return*/, undefined];
                        }
                        namespace = extensions[0].namespace.toLowerCase();
                        if (this.isBuiltinNamespace(namespace)) {
                            apiVersion = this.options.apiVersion;
                            try {
                                for (extensions_1 = __values(extensions), extensions_1_1 = extensions_1.next(); !extensions_1_1.done; extensions_1_1 = extensions_1.next()) {
                                    extension = extensions_1_1.value;
                                    if (this.isVersionLTE(extension.version, apiVersion)) {
                                        return [2 /*return*/, extension];
                                    }
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (extensions_1_1 && !extensions_1_1.done && (_b = extensions_1.return)) _b.call(extensions_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            console.log("Skipping: built-in extension \"" + id + "\" at version \"" + apiVersion + "\" does not exist.");
                        }
                        else {
                            try {
                                for (extensions_2 = __values(extensions), extensions_2_1 = extensions_2.next(); !extensions_2_1.done; extensions_2_1 = extensions_2.next()) {
                                    extension = extensions_2_1.value;
                                    if (this.isEngineSupported((_a = extension.engines) === null || _a === void 0 ? void 0 : _a.vscode)) {
                                        return [2 /*return*/, extension];
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (extensions_2_1 && !extensions_2_1.done && (_c = extensions_2.return)) _c.call(extensions_2);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the latest compatible version of an extension.
     * @param entry the extension search entry.
     *
     * @returns the latest compatible version of an extension if it exists, else `undefined`.
     */
    OVSXClient.prototype.getLatestCompatibleVersion = function (entry) {
        var e_3, _a, e_4, _b;
        var _c;
        var extensions = entry.allVersions;
        if (this.isBuiltinNamespace(entry.namespace)) {
            var apiVersion = this.options.apiVersion;
            try {
                for (var extensions_3 = __values(extensions), extensions_3_1 = extensions_3.next(); !extensions_3_1.done; extensions_3_1 = extensions_3.next()) {
                    var extension = extensions_3_1.value;
                    if (this.isVersionLTE(extension.version, apiVersion)) {
                        return extension;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (extensions_3_1 && !extensions_3_1.done && (_a = extensions_3.return)) _a.call(extensions_3);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        else {
            try {
                for (var extensions_4 = __values(extensions), extensions_4_1 = extensions_4.next(); !extensions_4_1.done; extensions_4_1 = extensions_4.next()) {
                    var extension = extensions_4_1.value;
                    if (this.isEngineSupported((_c = extension.engines) === null || _c === void 0 ? void 0 : _c.vscode)) {
                        return extension;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (extensions_4_1 && !extensions_4_1.done && (_b = extensions_4.return)) _b.call(extensions_4);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    /**
     * Determine if the engine is supported by the application.
     * @param engine the engine.
     *
     * @returns `true` if the engine satisfies the API version.
     */
    OVSXClient.prototype.isEngineSupported = function (engine) {
        if (!engine) {
            return false;
        }
        // Determine engine compatibility.
        if (engine === '*') {
            return true;
        }
        else {
            return semver.satisfies(this.options.apiVersion, engine);
        }
    };
    /**
     * Determines if the extension namespace is a builtin maintained by the framework.
     * @param namespace the extension namespace to verify.
     */
    OVSXClient.prototype.isBuiltinNamespace = function (namespace) {
        return namespace === ovsx_types_1.VSXBuiltinNamespaces.VSCODE
            || namespace === ovsx_types_1.VSXBuiltinNamespaces.THEIA;
    };
    /**
     * Determines if the first version is less than or equal the second version.
     * - v1 <= v2.
     * @param a the first semver version.
     * @param b the second semver version.
     */
    OVSXClient.prototype.isVersionLTE = function (a, b) {
        var versionA = semver.clean(a);
        var versionB = semver.clean(b);
        if (!versionA || !versionB) {
            return false;
        }
        return semver.lte(versionA, versionB);
    };
    return OVSXClient;
}());
exports.OVSXClient = OVSXClient;
//# sourceMappingURL=ovsx-client.js.map