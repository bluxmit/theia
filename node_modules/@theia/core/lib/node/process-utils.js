"use strict";
/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessUtils = void 0;
var cp = require("child_process");
var inversify_1 = require("inversify");
/**
 * `@theia/core` service with some process-related utilities.
 */
var ProcessUtils = /** @class */ (function () {
    function ProcessUtils() {
    }
    ProcessUtils.prototype.terminateProcessTree = function (ppid) {
        if (process.platform === 'win32') {
            this.winTerminateProcessTree(ppid);
        }
        else {
            this.unixTerminateProcessTree(ppid);
        }
    };
    ProcessUtils.prototype.winTerminateProcessTree = function (ppid) {
        this.spawnSync('taskkill.exe', ['/f', '/t', '/pid', ppid.toString(10)]);
    };
    ProcessUtils.prototype.unixTerminateProcessTree = function (ppid) {
        var e_1, _a;
        try {
            for (var _b = __values(this.unixGetChildrenRecursive(ppid)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pid = _c.value;
                // Prevent killing the current process:
                if (pid !== process.pid) {
                    // Don't stop if a process fails to be killed (keep on killing the others):
                    try {
                        process.kill(pid);
                    }
                    catch (error) {
                        console.error(error);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (ppid === this.unixGetPGID(ppid)) {
            // When a process pgid === pid this means the the process is a group leader.
            // We can then kill every process part of its group by doing `kill(-pgid)`.
            // This can catch leaked processes under `init` that are still part of the group.
            process.kill(-ppid);
        }
        process.kill(ppid);
    };
    ProcessUtils.prototype.unixGetPGID = function (pid) {
        var stdout = this.spawnSync('ps', ['-p', pid.toString(10), '-o', 'pgid=']).stdout;
        return Number.parseInt(stdout, 10);
    };
    ProcessUtils.prototype.unixGetChildrenRecursive = function (ppid) {
        var e_2, _a;
        var stdout = this.spawnSync('ps', ['ax', '-o', 'ppid=,pid=']).stdout;
        var pids = new Set([ppid]);
        var matcher = /(\d+)\s+(\d+)/;
        var psList = stdout
            .trim()
            .split('\n')
            .map(function (line) {
            var match = line.match(matcher);
            return {
                ppid: Number.parseInt(match[1], 10),
                pid: Number.parseInt(match[2], 10),
            };
        });
        // Keep looking for parent/child relationships while we keep finding new parents:
        var size;
        do {
            size = pids.size;
            try {
                for (var psList_1 = (e_2 = void 0, __values(psList)), psList_1_1 = psList_1.next(); !psList_1_1.done; psList_1_1 = psList_1.next()) {
                    var child = psList_1_1.value;
                    if (pids.has(child.ppid)) {
                        pids.add(child.pid);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (psList_1_1 && !psList_1_1.done && (_a = psList_1.return)) _a.call(psList_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        } while (size !== pids.size);
        // Exclude the requested parent id:
        pids.delete(ppid);
        return pids;
    };
    ProcessUtils.prototype.spawnSync = function (file, argv, options) {
        var _a;
        var result = cp.spawnSync(file, argv, __assign(__assign({}, options), { encoding: 'utf8' }));
        if (result.error) {
            throw result.error;
        }
        if (result.status !== 0) {
            throw new Error(JSON.stringify(file) + " exited with " + ((_a = result.status) !== null && _a !== void 0 ? _a : result.signal) + ". Output:\n" + JSON.stringify(result.output));
        }
        return result;
    };
    ProcessUtils = __decorate([
        inversify_1.injectable()
    ], ProcessUtils);
    return ProcessUtils;
}());
exports.ProcessUtils = ProcessUtils;
//# sourceMappingURL=process-utils.js.map