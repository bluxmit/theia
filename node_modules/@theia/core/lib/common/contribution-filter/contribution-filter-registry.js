"use strict";
/********************************************************************************
 * Copyright (C) 2021 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContributionFilterRegistryImpl = void 0;
var inversify_1 = require("inversify");
var contribution_filter_1 = require("./contribution-filter");
/**
 * Registry of contribution filters.
 *
 * Implement/bind to the `FilterContribution` interface/symbol to register your contribution filters.
 */
var ContributionFilterRegistryImpl = /** @class */ (function () {
    function ContributionFilterRegistryImpl(contributions) {
        var e_1, _a;
        if (contributions === void 0) { contributions = []; }
        this.initialized = false;
        this.genericFilters = [];
        this.typeToFilters = new Map();
        try {
            for (var contributions_1 = __values(contributions), contributions_1_1 = contributions_1.next(); !contributions_1_1.done; contributions_1_1 = contributions_1.next()) {
                var contribution = contributions_1_1.value;
                contribution.registerContributionFilters(this);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (contributions_1_1 && !contributions_1_1.done && (_a = contributions_1.return)) _a.call(contributions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.initialized = true;
    }
    ContributionFilterRegistryImpl.prototype.addFilters = function (types, filters) {
        var _a, e_2, _b, _c;
        if (this.initialized) {
            throw new Error('cannot add filters after initialization is done.');
        }
        else if (types === '*') {
            (_a = this.genericFilters).push.apply(_a, __spread(filters));
        }
        else {
            try {
                for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                    var type = types_1_1.value;
                    (_c = this.getOrCreate(type)).push.apply(_c, __spread(filters));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (types_1_1 && !types_1_1.done && (_b = types_1.return)) _b.call(types_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    ContributionFilterRegistryImpl.prototype.applyFilters = function (toFilter, type) {
        var filters = this.getFilters(type);
        if (filters.length === 0) {
            return toFilter;
        }
        return toFilter.filter(function (object) { return filters.every(function (filter) { return filter(object); }); });
    };
    ContributionFilterRegistryImpl.prototype.getOrCreate = function (type) {
        var value = this.typeToFilters.get(type);
        if (value === undefined) {
            this.typeToFilters.set(type, value = []);
        }
        return value;
    };
    ContributionFilterRegistryImpl.prototype.getFilters = function (type) {
        return __spread(this.typeToFilters.get(type) || [], this.genericFilters);
    };
    ContributionFilterRegistryImpl = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.multiInject(contribution_filter_1.FilterContribution)), __param(0, inversify_1.optional()),
        __metadata("design:paramtypes", [Array])
    ], ContributionFilterRegistryImpl);
    return ContributionFilterRegistryImpl;
}());
exports.ContributionFilterRegistryImpl = ContributionFilterRegistryImpl;
//# sourceMappingURL=contribution-filter-registry.js.map