"use strict";
/********************************************************************************
 * Copyright (C) 2020 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceTreeModel = exports.PreferenceFilterChangeSource = void 0;
var inversify_1 = require("@theia/core/shared/inversify");
var browser_1 = require("@theia/core/lib/browser");
var core_1 = require("@theia/core");
var preference_searchbar_widget_1 = require("./views/preference-searchbar-widget");
var preference_tree_generator_1 = require("./util/preference-tree-generator");
var fuzzy = require("@theia/core/shared/fuzzy");
var preference_scope_tabbar_widget_1 = require("./views/preference-scope-tabbar-widget");
var preference_types_1 = require("./util/preference-types");
var PreferenceFilterChangeSource;
(function (PreferenceFilterChangeSource) {
    PreferenceFilterChangeSource[PreferenceFilterChangeSource["Schema"] = 0] = "Schema";
    PreferenceFilterChangeSource[PreferenceFilterChangeSource["Search"] = 1] = "Search";
    PreferenceFilterChangeSource[PreferenceFilterChangeSource["Scope"] = 2] = "Scope";
})(PreferenceFilterChangeSource = exports.PreferenceFilterChangeSource || (exports.PreferenceFilterChangeSource = {}));
var PreferenceTreeModel = /** @class */ (function (_super) {
    __extends(PreferenceTreeModel, _super);
    function PreferenceTreeModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onTreeFilterChangedEmitter = new core_1.Emitter();
        _this.onFilterChanged = _this.onTreeFilterChangedEmitter.event;
        _this.lastSearchedFuzzy = '';
        _this.lastSearchedLiteral = '';
        _this._currentScope = Number(preference_types_1.Preference.DEFAULT_SCOPE.scope);
        _this._isFiltered = false;
        _this._currentRows = new Map();
        _this._totalVisibleLeaves = 0;
        return _this;
    }
    Object.defineProperty(PreferenceTreeModel.prototype, "currentRows", {
        get: function () {
            return this._currentRows;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceTreeModel.prototype, "totalVisibleLeaves", {
        get: function () {
            return this._totalVisibleLeaves;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceTreeModel.prototype, "isFiltered", {
        get: function () {
            return this._isFiltered;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceTreeModel.prototype, "propertyList", {
        get: function () {
            return this.schemaProvider.getCombinedSchema().properties;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceTreeModel.prototype, "currentScope", {
        get: function () {
            return this.scopeTracker.currentScope;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceTreeModel.prototype, "onSchemaChanged", {
        get: function () {
            return this.treeGenerator.onSchemaChanged;
        },
        enumerable: false,
        configurable: true
    });
    PreferenceTreeModel.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.init.call(this);
                        this.toDispose.pushAll([
                            this.treeGenerator.onSchemaChanged(function (newTree) { return _this.handleNewSchema(newTree); }),
                            this.scopeTracker.onScopeChanged(function (scopeDetails) {
                                _this._currentScope = scopeDetails.scope;
                                _this.updateFilteredRows(PreferenceFilterChangeSource.Scope);
                            }),
                            this.filterInput.onFilterChanged(function (newSearchTerm) {
                                _this.lastSearchedLiteral = newSearchTerm;
                                _this.lastSearchedFuzzy = newSearchTerm.replace(/\s/g, '');
                                _this._isFiltered = newSearchTerm.length > 2;
                                if (_this.isFiltered) {
                                    _this.expandAll();
                                }
                                else if (browser_1.CompositeTreeNode.is(_this.root)) {
                                    _this.collapseAll(_this.root);
                                }
                                _this.updateFilteredRows(PreferenceFilterChangeSource.Search);
                            }),
                            this.onFilterChanged(function () {
                                _this.filterInput.updateResultsCount(_this._totalVisibleLeaves);
                            }),
                            this.onTreeFilterChangedEmitter,
                        ]);
                        return [4 /*yield*/, this.preferenceService.ready];
                    case 1:
                        _a.sent();
                        this.handleNewSchema(this.treeGenerator.root);
                        return [2 /*return*/];
                }
            });
        });
    };
    PreferenceTreeModel.prototype.handleNewSchema = function (newRoot) {
        this.root = newRoot;
        if (this.isFiltered) {
            this.expandAll();
        }
        this.updateFilteredRows(PreferenceFilterChangeSource.Schema);
    };
    PreferenceTreeModel.prototype.updateRows = function () {
        var e_1, _a;
        var root = this.root;
        this._currentRows = new Map();
        if (root) {
            this._totalVisibleLeaves = 0;
            var index = 0;
            try {
                for (var _b = __values(new browser_1.TopDownTreeIterator(root, {
                    pruneCollapsed: false,
                    pruneSiblings: true
                })), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    if (browser_1.TreeNode.isVisible(node) && preference_types_1.Preference.TreeNode.is(node)) {
                        var id = preference_types_1.Preference.TreeNode.getGroupAndIdFromNodeId(node.id).id;
                        if (browser_1.CompositeTreeNode.is(node) || this.passesCurrentFilters(node, id)) {
                            this.updateVisibleChildren(node);
                            this._currentRows.set(node.id, {
                                index: index++,
                                node: node,
                                depth: node.depth,
                                visibleChildren: 0,
                            });
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    PreferenceTreeModel.prototype.updateFilteredRows = function (source) {
        this.updateRows();
        this.onTreeFilterChangedEmitter.fire({ source: source });
    };
    PreferenceTreeModel.prototype.passesCurrentFilters = function (node, prefID) {
        var _a;
        if (!this.schemaProvider.isValidInScope(prefID, this._currentScope)) {
            return false;
        }
        if (!this._isFiltered) {
            return true;
        }
        // When filtering, VSCode will render an item that is present in the commonly used section only once but render both its possible parents in the left-hand tree.
        // E.g. searching for editor.renderWhitespace will show one item in the main panel, but both 'Commonly Used' and 'Text Editor' in the left tree.
        // That seems counterintuitive and introduces a number of special cases, so I prefer to remove the commonly used section entirely when the user searches.
        if (node.id.startsWith(preference_tree_generator_1.COMMONLY_USED_SECTION_PREFIX)) {
            return false;
        }
        return fuzzy.test(this.lastSearchedFuzzy, prefID) // search matches preference name.
            // search matches description. Fuzzy isn't ideal here because the score depends on the order of discovery.
            || ((_a = node.preference.data.description) !== null && _a !== void 0 ? _a : '').includes(this.lastSearchedLiteral);
    };
    PreferenceTreeModel.prototype.isVisibleSelectableNode = function (node) {
        var _a;
        return browser_1.CompositeTreeNode.is(node) && !!((_a = this._currentRows.get(node.id)) === null || _a === void 0 ? void 0 : _a.visibleChildren);
    };
    PreferenceTreeModel.prototype.updateVisibleChildren = function (node) {
        var _a, _b, _c, _d;
        if (!browser_1.CompositeTreeNode.is(node)) {
            this._totalVisibleLeaves++;
            var nextParent = ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.id) && this._currentRows.get((_b = node.parent) === null || _b === void 0 ? void 0 : _b.id);
            while (nextParent && nextParent.node !== this.root) {
                if (nextParent) {
                    nextParent.visibleChildren += 1;
                }
                nextParent = ((_c = nextParent.node.parent) === null || _c === void 0 ? void 0 : _c.id) && this._currentRows.get((_d = nextParent.node.parent) === null || _d === void 0 ? void 0 : _d.id);
                if (nextParent) {
                    nextParent.isExpansible = true;
                }
            }
        }
    };
    PreferenceTreeModel.prototype.collapseAllExcept = function (openNode) {
        var _this = this;
        if (browser_1.ExpandableTreeNode.is(openNode)) {
            this.expandNode(openNode);
        }
        if (browser_1.CompositeTreeNode.is(this.root)) {
            this.root.children.forEach(function (child) {
                if (child !== openNode && browser_1.ExpandableTreeNode.is(child)) {
                    _this.collapseNode(child);
                }
            });
        }
    };
    PreferenceTreeModel.prototype.expandAll = function () {
        var _this = this;
        if (browser_1.CompositeTreeNode.is(this.root)) {
            this.root.children.forEach(function (child) {
                if (browser_1.ExpandableTreeNode.is(child)) {
                    _this.expandNode(child);
                }
            });
        }
    };
    /**
     * @returns true if selection changed, false otherwise
     */
    PreferenceTreeModel.prototype.selectIfNotSelected = function (node) {
        var currentlySelected = this.selectedNodes[0];
        if (node !== currentlySelected) {
            this.selectNode(node);
            return true;
        }
        return false;
    };
    __decorate([
        inversify_1.inject(browser_1.PreferenceSchemaProvider),
        __metadata("design:type", browser_1.PreferenceSchemaProvider)
    ], PreferenceTreeModel.prototype, "schemaProvider", void 0);
    __decorate([
        inversify_1.inject(preference_searchbar_widget_1.PreferencesSearchbarWidget),
        __metadata("design:type", preference_searchbar_widget_1.PreferencesSearchbarWidget)
    ], PreferenceTreeModel.prototype, "filterInput", void 0);
    __decorate([
        inversify_1.inject(preference_tree_generator_1.PreferenceTreeGenerator),
        __metadata("design:type", preference_tree_generator_1.PreferenceTreeGenerator)
    ], PreferenceTreeModel.prototype, "treeGenerator", void 0);
    __decorate([
        inversify_1.inject(preference_scope_tabbar_widget_1.PreferencesScopeTabBar),
        __metadata("design:type", preference_scope_tabbar_widget_1.PreferencesScopeTabBar)
    ], PreferenceTreeModel.prototype, "scopeTracker", void 0);
    __decorate([
        inversify_1.inject(browser_1.PreferenceService),
        __metadata("design:type", Object)
    ], PreferenceTreeModel.prototype, "preferenceService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], PreferenceTreeModel.prototype, "init", null);
    PreferenceTreeModel = __decorate([
        inversify_1.injectable()
    ], PreferenceTreeModel);
    return PreferenceTreeModel;
}(browser_1.TreeModelImpl));
exports.PreferenceTreeModel = PreferenceTreeModel;
//# sourceMappingURL=preference-tree-model.js.map