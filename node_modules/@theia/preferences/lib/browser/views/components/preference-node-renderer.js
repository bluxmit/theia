"use strict";
/********************************************************************************
 * Copyright (C) 2020 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceLeafNodeRenderer = exports.PreferenceHeaderRenderer = exports.PreferenceNodeRenderer = exports.SUBHEADER_CLASS = exports.HEADER_CLASS = exports.PreferenceNodeRendererFactory = void 0;
var inversify_1 = require("@theia/core/shared/inversify");
var browser_1 = require("@theia/core/lib/browser");
var preference_types_1 = require("../../util/preference-types");
var preference_tree_label_provider_1 = require("../../util/preference-tree-label-provider");
var preference_scope_tabbar_widget_1 = require("../preference-scope-tabbar-widget");
var debounce = require("@theia/core/shared/lodash.debounce");
var preference_tree_model_1 = require("../../preference-tree-model");
var preference_searchbar_widget_1 = require("../preference-searchbar-widget");
exports.PreferenceNodeRendererFactory = Symbol('PreferenceNodeRendererFactory');
exports.HEADER_CLASS = 'settings-section-category-title';
exports.SUBHEADER_CLASS = 'settings-section-subcategory-title';
var PreferenceNodeRenderer = /** @class */ (function () {
    function PreferenceNodeRenderer() {
        this.attached = false;
    }
    Object.defineProperty(PreferenceNodeRenderer.prototype, "node", {
        get: function () {
            return this.domNode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceNodeRenderer.prototype, "nodeId", {
        get: function () {
            return this.preferenceNode.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceNodeRenderer.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceNodeRenderer.prototype, "group", {
        get: function () {
            return this._group;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PreferenceNodeRenderer.prototype, "visible", {
        get: function () {
            return !this.node.classList.contains('hidden');
        },
        enumerable: false,
        configurable: true
    });
    PreferenceNodeRenderer.prototype.init = function () {
        this.setId();
        this.domNode = this.createDomNode();
    };
    PreferenceNodeRenderer.prototype.setId = function () {
        var _a;
        var _b = preference_types_1.Preference.TreeNode.getGroupAndIdFromNodeId(this.preferenceNode.id), id = _b.id, group = _b.group;
        var segments = id.split('.');
        this._id = id;
        this._group = group;
        this._subgroup = (_a = (group === segments[0] ? segments[1] : segments[0])) !== null && _a !== void 0 ? _a : '';
    };
    PreferenceNodeRenderer.prototype.insertBefore = function (nextSibling) {
        nextSibling.insertAdjacentElement('beforebegin', this.domNode);
        this.attached = true;
    };
    PreferenceNodeRenderer.prototype.insertAfter = function (previousSibling) {
        previousSibling.insertAdjacentElement('afterend', this.domNode);
    };
    PreferenceNodeRenderer.prototype.appendTo = function (parent) {
        parent.appendChild(this.domNode);
    };
    PreferenceNodeRenderer.prototype.prependTo = function (parent) {
        parent.prepend(this.domNode);
    };
    PreferenceNodeRenderer.prototype.hide = function () {
        this.domNode.classList.add('hidden');
    };
    PreferenceNodeRenderer.prototype.show = function () {
        this.domNode.classList.remove('hidden');
    };
    PreferenceNodeRenderer.prototype.dispose = function () {
        this.domNode.remove();
    };
    __decorate([
        inversify_1.inject(preference_types_1.Preference.Node),
        __metadata("design:type", Object)
    ], PreferenceNodeRenderer.prototype, "preferenceNode", void 0);
    __decorate([
        inversify_1.inject(preference_tree_label_provider_1.PreferenceTreeLabelProvider),
        __metadata("design:type", preference_tree_label_provider_1.PreferenceTreeLabelProvider)
    ], PreferenceNodeRenderer.prototype, "labelProvider", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PreferenceNodeRenderer.prototype, "init", null);
    PreferenceNodeRenderer = __decorate([
        inversify_1.injectable()
    ], PreferenceNodeRenderer);
    return PreferenceNodeRenderer;
}());
exports.PreferenceNodeRenderer = PreferenceNodeRenderer;
var PreferenceHeaderRenderer = /** @class */ (function (_super) {
    __extends(PreferenceHeaderRenderer, _super);
    function PreferenceHeaderRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PreferenceHeaderRenderer.prototype.createDomNode = function () {
        var wrapper = document.createElement('ul');
        wrapper.className = 'settings-section';
        wrapper.id = this.preferenceNode.id + "-editor";
        var isCategory = preference_types_1.Preference.TreeNode.isTopLevel(this.preferenceNode);
        var hierarchyClassName = isCategory ? exports.HEADER_CLASS : exports.SUBHEADER_CLASS;
        var name = this.labelProvider.getName(this.preferenceNode);
        var label = document.createElement('li');
        label.classList.add('settings-section-title', hierarchyClassName);
        label.textContent = name;
        wrapper.appendChild(label);
        return wrapper;
    };
    return PreferenceHeaderRenderer;
}(PreferenceNodeRenderer));
exports.PreferenceHeaderRenderer = PreferenceHeaderRenderer;
var PreferenceLeafNodeRenderer = /** @class */ (function (_super) {
    __extends(PreferenceLeafNodeRenderer, _super);
    function PreferenceLeafNodeRenderer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isModifiedFromDefault = false;
        _this.setPreferenceWithDebounce = debounce(_this.setPreferenceImmediately.bind(_this), 500, { leading: false, trailing: true });
        return _this;
    }
    PreferenceLeafNodeRenderer.prototype.init = function () {
        this.setId();
        this.updateInspection();
        this.domNode = this.createDomNode();
        this.updateModificationStatus();
    };
    PreferenceLeafNodeRenderer.prototype.updateInspection = function () {
        this.inspection = this.preferenceService.inspect(this.id, this.scopeTracker.currentScope.uri);
    };
    PreferenceLeafNodeRenderer.prototype.createDomNode = function () {
        var wrapper = document.createElement('li');
        wrapper.classList.add('single-pref');
        wrapper.id = this.id + "-editor";
        wrapper.setAttribute('data-pref-id', this.id);
        wrapper.setAttribute('data-node-id', this.preferenceNode.id);
        var headlineWrapper = document.createElement('div');
        headlineWrapper.classList.add('pref-name');
        headlineWrapper.title = this.id;
        this.headlineWrapper = headlineWrapper;
        wrapper.appendChild(headlineWrapper);
        this.updateHeadline();
        var gutter = document.createElement('div');
        gutter.classList.add('pref-context-gutter');
        this.gutter = gutter;
        wrapper.appendChild(gutter);
        var cog = document.createElement('i');
        cog.className = 'codicon codicon-settings-gear settings-context-menu-btn';
        cog.setAttribute('aria-label', 'Open Context Menu');
        cog.setAttribute('role', 'button');
        cog.onclick = this.handleCogAction.bind(this);
        cog.onkeydown = this.handleCogAction.bind(this);
        cog.title = 'More actions...';
        gutter.appendChild(cog);
        var activeType = Array.isArray(this.preferenceNode.preference.data.type) ? this.preferenceNode.preference.data.type[0] : this.preferenceNode.preference.data.type;
        var contentWrapper = document.createElement('div');
        contentWrapper.classList.add('pref-content-container', activeType !== null && activeType !== void 0 ? activeType : 'open-json');
        wrapper.appendChild(contentWrapper);
        var _a = this.preferenceNode.preference.data, description = _a.description, markdownDescription = _a.markdownDescription;
        var descriptionToUse = markdownDescription || description;
        if (descriptionToUse) {
            var descriptionWrapper = document.createElement('div');
            descriptionWrapper.classList.add('pref-description');
            descriptionWrapper.textContent = descriptionToUse;
            contentWrapper.appendChild(descriptionWrapper);
        }
        var interactableWrapper = document.createElement('div');
        interactableWrapper.classList.add('pref-input');
        contentWrapper.appendChild(interactableWrapper);
        this.createInteractable(interactableWrapper);
        return wrapper;
    };
    PreferenceLeafNodeRenderer.prototype.handleCogAction = function (_a) {
        var _this = this;
        var _b, _c;
        var currentTarget = _a.currentTarget;
        var value = (_b = preference_types_1.Preference.getValueInScope(this.inspection, this.scopeTracker.currentScope.scope)) !== null && _b !== void 0 ? _b : (_c = this.inspection) === null || _c === void 0 ? void 0 : _c.defaultValue;
        var target = currentTarget;
        if (target && value !== undefined) {
            this.showCog();
            var domRect = target.getBoundingClientRect();
            this.menuRenderer.render({
                menuPath: preference_types_1.PreferenceMenus.PREFERENCE_EDITOR_CONTEXT_MENU,
                anchor: { x: domRect.left, y: domRect.bottom },
                args: [{ id: this.id, value: value }],
                onHide: function () { return _this.hideCog(); }
            });
        }
    };
    PreferenceLeafNodeRenderer.prototype.addModifiedMarking = function () {
        this.gutter.classList.add('theia-mod-item-modified');
    };
    PreferenceLeafNodeRenderer.prototype.removeModifiedMarking = function () {
        this.gutter.classList.remove('theia-mod-item-modified');
    };
    PreferenceLeafNodeRenderer.prototype.showCog = function () {
        this.gutter.classList.add('show-cog');
    };
    PreferenceLeafNodeRenderer.prototype.hideCog = function () {
        this.gutter.classList.remove('show-cog');
    };
    PreferenceLeafNodeRenderer.prototype.updateModificationStatus = function (knownCurrentValue) {
        var wasModified = this.isModifiedFromDefault;
        var inspection = this.inspection;
        var valueInCurrentScope = knownCurrentValue !== null && knownCurrentValue !== void 0 ? knownCurrentValue : preference_types_1.Preference.getValueInScope(inspection, this.scopeTracker.currentScope.scope);
        this.isModifiedFromDefault = valueInCurrentScope !== undefined && !browser_1.PreferenceProvider.deepEqual(valueInCurrentScope, inspection === null || inspection === void 0 ? void 0 : inspection.defaultValue);
        if (wasModified !== this.isModifiedFromDefault) {
            this.gutter.classList.toggle('theia-mod-item-modified', this.isModifiedFromDefault);
        }
    };
    PreferenceLeafNodeRenderer.prototype.updateHeadline = function (filtered) {
        if (filtered === void 0) { filtered = this.model.isFiltered; }
        var headlineWrapper = this.headlineWrapper;
        if (this.headlineWrapper.childElementCount === 0) {
            var name_1 = this.labelProvider.getName(this.preferenceNode);
            var nameWrapper = document.createElement('span');
            nameWrapper.classList.add('preference-leaf-headline-name');
            nameWrapper.textContent = name_1;
            headlineWrapper.appendChild(nameWrapper);
        }
        var prefix = this.labelProvider.getPrefix(this.preferenceNode, filtered);
        var currentFirstChild = headlineWrapper.children[0];
        var currentFirstChildIsPrefix = currentFirstChild.classList.contains('preference-leaf-headline-prefix');
        if (prefix) {
            var prefixWrapper = void 0;
            if (currentFirstChildIsPrefix) {
                prefixWrapper = currentFirstChild;
            }
            else {
                prefixWrapper = document.createElement('span');
                prefixWrapper.classList.add('preference-leaf-headline-prefix');
                headlineWrapper.insertBefore(prefixWrapper, currentFirstChild);
            }
            prefixWrapper.textContent = prefix;
        }
        else if (currentFirstChildIsPrefix) {
            headlineWrapper.removeChild(currentFirstChild);
        }
        var currentLastChild = headlineWrapper.lastChild;
        if (currentLastChild.classList.contains('preference-leaf-headline-suffix')) {
            this.compareOtherModifiedScopes(headlineWrapper, currentLastChild);
        }
        else {
            this.createOtherModifiedScopes(headlineWrapper);
        }
    };
    PreferenceLeafNodeRenderer.prototype.compareOtherModifiedScopes = function (headlineWrapper, currentSuffix) {
        var modifiedScopes = this.getModifiedScopesAsStrings();
        if (modifiedScopes.length === 0) {
            headlineWrapper.removeChild(currentSuffix);
        }
        else {
            var modifiedMessagePrefix = currentSuffix.children[0];
            var newMessagePrefix = this.getModifiedMessagePrefix();
            if (modifiedMessagePrefix.textContent !== newMessagePrefix) {
                modifiedMessagePrefix.textContent = newMessagePrefix;
            }
            var _a = __read(modifiedScopes, 2), firstModifiedScope = _a[0], secondModifiedScope = _a[1];
            var firstScopeMessage = currentSuffix.children[1];
            var secondScopeMessage = currentSuffix.children[2];
            firstScopeMessage.children[0].textContent = browser_1.PreferenceScope[firstModifiedScope];
            this.addEventHandlerToModifiedScope(firstModifiedScope, firstScopeMessage.children[0]);
            if (modifiedScopes.length === 1 && secondScopeMessage) {
                currentSuffix.removeChild(secondScopeMessage);
            }
            else if (modifiedScopes.length === 2 && !secondScopeMessage) {
                var newSecondMessage = this.createModifiedScopeMessage(secondModifiedScope);
                currentSuffix.appendChild(newSecondMessage);
            }
            // If both scopes are modified and both messages are present, do nothing.
        }
    };
    PreferenceLeafNodeRenderer.prototype.createOtherModifiedScopes = function (headlineWrapper) {
        var _this = this;
        var modifiedScopes = this.getModifiedScopesAsStrings();
        if (modifiedScopes.length !== 0) {
            var wrapper_1 = document.createElement('i');
            wrapper_1.classList.add('preference-leaf-headline-suffix');
            headlineWrapper.appendChild(wrapper_1);
            var messagePrefix = this.getModifiedMessagePrefix();
            var messageWrapper = document.createElement('span');
            messageWrapper.classList.add('preference-other-modified-scope-alert');
            messageWrapper.textContent = messagePrefix;
            wrapper_1.appendChild(messageWrapper);
            modifiedScopes.forEach(function (scopeName, i) {
                var scopeWrapper = _this.createModifiedScopeMessage(scopeName);
                wrapper_1.appendChild(scopeWrapper);
            });
        }
    };
    PreferenceLeafNodeRenderer.prototype.createModifiedScopeMessage = function (scope) {
        var scopeWrapper = document.createElement('span');
        scopeWrapper.classList.add('preference-modified-scope-wrapper');
        var scopeInteractable = document.createElement('span');
        scopeInteractable.classList.add('preference-scope-underlined');
        var scopeName = browser_1.PreferenceScope[scope];
        this.addEventHandlerToModifiedScope(scope, scopeInteractable);
        scopeInteractable.textContent = scopeName;
        scopeWrapper.appendChild(scopeInteractable);
        return scopeWrapper;
    };
    PreferenceLeafNodeRenderer.prototype.getModifiedMessagePrefix = function () {
        return this.isModifiedFromDefault ? 'Also modified in: ' : 'Modified in: ';
    };
    PreferenceLeafNodeRenderer.prototype.addEventHandlerToModifiedScope = function (scope, scopeWrapper) {
        var _this = this;
        if (scope === browser_1.PreferenceScope.User || scope === browser_1.PreferenceScope.Workspace) {
            var eventHandler = function () {
                _this.scopeTracker.setScope(scope);
                _this.searchbar.updateSearchTerm(_this.id);
            };
            scopeWrapper.onclick = eventHandler;
            scopeWrapper.onkeydown = eventHandler;
            scopeWrapper.tabIndex = 0;
        }
        else {
            scopeWrapper.onclick = null; // eslint-disable-line no-null/no-null
            scopeWrapper.onkeydown = null; // eslint-disable-line no-null/no-null
            scopeWrapper.tabIndex = -1;
        }
    };
    PreferenceLeafNodeRenderer.prototype.getModifiedScopesAsStrings = function () {
        var e_1, _a;
        var currentScopeInView = this.scopeTracker.currentScope.scope;
        var inspection = this.inspection;
        var modifiedScopes = [];
        if (inspection) {
            try {
                for (var _b = __values([browser_1.PreferenceScope.User, browser_1.PreferenceScope.Workspace]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var otherScope = _c.value;
                    if (otherScope !== currentScopeInView) {
                        var valueInOtherScope = preference_types_1.Preference.getValueInScope(inspection, otherScope);
                        if (valueInOtherScope !== undefined && !browser_1.PreferenceProvider.deepEqual(valueInOtherScope, inspection.defaultValue)) {
                            modifiedScopes.push(otherScope);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return modifiedScopes;
    };
    PreferenceLeafNodeRenderer.prototype.getValue = function () {
        var _a;
        var currentValue = preference_types_1.Preference.getValueInScope(this.inspection, this.scopeTracker.currentScope.scope);
        if (currentValue === undefined) {
            currentValue = (_a = this.inspection) === null || _a === void 0 ? void 0 : _a.defaultValue;
        }
        return currentValue !== null && currentValue !== void 0 ? currentValue : this.getFallbackValue();
    };
    PreferenceLeafNodeRenderer.prototype.setPreferenceImmediately = function (value) {
        return this.preferenceService.set(this.id, value, this.scopeTracker.currentScope.scope, this.scopeTracker.currentScope.uri);
    };
    PreferenceLeafNodeRenderer.prototype.handleSearchChange = function (isFiltered) {
        if (isFiltered === void 0) { isFiltered = this.model.isFiltered; }
        this.updateHeadline(isFiltered);
    };
    PreferenceLeafNodeRenderer.prototype.handleScopeChange = function (isFiltered) {
        if (isFiltered === void 0) { isFiltered = this.model.isFiltered; }
        this.handleValueChange();
        this.updateHeadline(isFiltered);
    };
    PreferenceLeafNodeRenderer.prototype.handleValueChange = function () {
        this.doHandleValueChange();
        this.updateHeadline();
    };
    __decorate([
        inversify_1.inject(preference_types_1.Preference.Node),
        __metadata("design:type", Object)
    ], PreferenceLeafNodeRenderer.prototype, "preferenceNode", void 0);
    __decorate([
        inversify_1.inject(browser_1.PreferenceService),
        __metadata("design:type", Object)
    ], PreferenceLeafNodeRenderer.prototype, "preferenceService", void 0);
    __decorate([
        inversify_1.inject(browser_1.ContextMenuRenderer),
        __metadata("design:type", browser_1.ContextMenuRenderer)
    ], PreferenceLeafNodeRenderer.prototype, "menuRenderer", void 0);
    __decorate([
        inversify_1.inject(preference_scope_tabbar_widget_1.PreferencesScopeTabBar),
        __metadata("design:type", preference_scope_tabbar_widget_1.PreferencesScopeTabBar)
    ], PreferenceLeafNodeRenderer.prototype, "scopeTracker", void 0);
    __decorate([
        inversify_1.inject(preference_tree_model_1.PreferenceTreeModel),
        __metadata("design:type", preference_tree_model_1.PreferenceTreeModel)
    ], PreferenceLeafNodeRenderer.prototype, "model", void 0);
    __decorate([
        inversify_1.inject(preference_searchbar_widget_1.PreferencesSearchbarWidget),
        __metadata("design:type", preference_searchbar_widget_1.PreferencesSearchbarWidget)
    ], PreferenceLeafNodeRenderer.prototype, "searchbar", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PreferenceLeafNodeRenderer.prototype, "init", null);
    PreferenceLeafNodeRenderer = __decorate([
        inversify_1.injectable()
    ], PreferenceLeafNodeRenderer);
    return PreferenceLeafNodeRenderer;
}(PreferenceNodeRenderer));
exports.PreferenceLeafNodeRenderer = PreferenceLeafNodeRenderer;
//# sourceMappingURL=preference-node-renderer.js.map