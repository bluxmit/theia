"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindPreferencesWidgets = void 0;
var browser_1 = require("@theia/core/lib/browser");
var preference_node_renderer_1 = require("./components/preference-node-renderer");
var preference_widget_1 = require("./preference-widget");
var preference_tree_widget_1 = require("./preference-tree-widget");
var preference_editor_widget_1 = require("./preference-editor-widget");
var preference_searchbar_widget_1 = require("./preference-searchbar-widget");
var preference_scope_tabbar_widget_1 = require("./preference-scope-tabbar-widget");
var preference_tree_model_1 = require("../preference-tree-model");
var preference_tree_label_provider_1 = require("../util/preference-tree-label-provider");
var preference_types_1 = require("../util/preference-types");
var preference_string_input_1 = require("./components/preference-string-input");
var preference_boolean_input_1 = require("./components/preference-boolean-input");
var preference_json_input_1 = require("./components/preference-json-input");
var preference_select_input_1 = require("./components/preference-select-input");
var preference_number_input_1 = require("./components/preference-number-input");
var preference_array_input_1 = require("./components/preference-array-input");
function bindPreferencesWidgets(bind) {
    bind(preference_tree_label_provider_1.PreferenceTreeLabelProvider).toSelf().inSingletonScope();
    bind(browser_1.LabelProviderContribution).toService(preference_tree_label_provider_1.PreferenceTreeLabelProvider);
    bind(preference_widget_1.PreferencesWidget)
        .toDynamicValue(function (_a) {
        var container = _a.container;
        return createPreferencesWidgetContainer(container).get(preference_widget_1.PreferencesWidget);
    })
        .inSingletonScope();
    bind(browser_1.WidgetFactory).toDynamicValue(function (_a) {
        var container = _a.container;
        return ({
            id: preference_widget_1.PreferencesWidget.ID,
            createWidget: function () { return container.get(preference_widget_1.PreferencesWidget); }
        });
    }).inSingletonScope();
    bind(preference_select_input_1.PreferenceSelectInputRenderer).toSelf();
    bind(preference_array_input_1.PreferenceArrayInputRenderer).toSelf();
    bind(preference_string_input_1.PreferenceStringInputRenderer).toSelf();
    bind(preference_boolean_input_1.PreferenceBooleanInputRenderer).toSelf();
    bind(preference_number_input_1.PreferenceNumberInputRenderer).toSelf();
    bind(preference_json_input_1.PreferenceJSONLinkRenderer).toSelf();
    bind(preference_node_renderer_1.PreferenceHeaderRenderer).toSelf();
}
exports.bindPreferencesWidgets = bindPreferencesWidgets;
function createPreferencesWidgetContainer(parent) {
    var child = browser_1.createTreeContainer(parent);
    child.bind(preference_tree_model_1.PreferenceTreeModel).toSelf();
    child.rebind(browser_1.TreeModel).toService(preference_tree_model_1.PreferenceTreeModel);
    child.unbind(browser_1.TreeWidget);
    child.bind(preference_tree_widget_1.PreferencesTreeWidget).toSelf();
    child.rebind(browser_1.TreeProps).toConstantValue(__assign(__assign({}, browser_1.defaultTreeProps), { search: false }));
    child.bind(preference_editor_widget_1.PreferencesEditorWidget).toSelf();
    child.bind(preference_searchbar_widget_1.PreferencesSearchbarWidget).toSelf();
    child.bind(preference_scope_tabbar_widget_1.PreferencesScopeTabBar).toSelf();
    child.bind(preference_widget_1.PreferencesWidget).toSelf();
    child.bind(preference_node_renderer_1.PreferenceNodeRendererFactory).toFactory(function (_a) {
        var container = _a.container;
        return function (node) {
            var _a;
            var grandchild = container.createChild();
            grandchild.bind(preference_types_1.Preference.Node).toConstantValue(node);
            if (preference_types_1.Preference.LeafNode.is(node)) {
                if (node.preference.data.enum) {
                    return grandchild.get(preference_select_input_1.PreferenceSelectInputRenderer);
                }
                var type = Array.isArray(node.preference.data.type) ? node.preference.data.type[0] : node.preference.data.type;
                if (type === 'array' && ((_a = node.preference.data.items) === null || _a === void 0 ? void 0 : _a.type) === 'string') {
                    return grandchild.get(preference_array_input_1.PreferenceArrayInputRenderer);
                }
                switch (type) {
                    case 'string':
                        return grandchild.get(preference_string_input_1.PreferenceStringInputRenderer);
                    case 'boolean':
                        return grandchild.get(preference_boolean_input_1.PreferenceBooleanInputRenderer);
                    case 'number':
                    case 'integer':
                        return grandchild.get(preference_number_input_1.PreferenceNumberInputRenderer);
                    default:
                        return grandchild.get(preference_json_input_1.PreferenceJSONLinkRenderer);
                }
            }
            else {
                return grandchild.get(preference_node_renderer_1.PreferenceHeaderRenderer);
            }
        };
    });
    return child;
}
//# sourceMappingURL=preference-widget-bindings.js.map