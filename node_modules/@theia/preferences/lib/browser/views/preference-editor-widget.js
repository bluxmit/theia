"use strict";
/********************************************************************************
 * Copyright (C) 2020 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferencesEditorWidget = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var inversify_1 = require("@theia/core/shared/inversify");
var throttle = require("@theia/core/shared/lodash.throttle");
var browser_1 = require("@theia/core/lib/browser");
var common_1 = require("@theia/core/lib/common");
var widget_1 = require("@theia/core/lib/browser/widgets/widget");
var preference_tree_model_1 = require("../preference-tree-model");
var preference_node_renderer_1 = require("./components/preference-node-renderer");
var preference_types_1 = require("../util/preference-types");
var preference_tree_generator_1 = require("../util/preference-tree-generator");
var preference_scope_tabbar_widget_1 = require("./preference-scope-tabbar-widget");
var PreferencesEditorWidget = /** @class */ (function (_super) {
    __extends(PreferencesEditorWidget, _super);
    function PreferencesEditorWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scrollOptions = widget_1.DEFAULT_SCROLL_OPTIONS;
        /**
         * Guards against scroll events and selection events looping into each other. Set before this widget initiates a selection.
         */
        _this.currentModelSelectionId = '';
        /**
         * Permits the user to expand multiple nodes without each one being collapsed on a new selection.
         */
        _this.lastUserSelection = '';
        _this.isAtScrollTop = true;
        _this.firstVisibleChildID = '';
        _this.renderers = new Map();
        // The commonly used section will duplicate preference ID's, so we'll keep a separate list of them.
        _this.commonlyUsedRenderers = new Map();
        _this.onScroll = throttle(_this.doOnScroll.bind(_this), 50);
        return _this;
    }
    PreferencesEditorWidget_1 = PreferencesEditorWidget;
    PreferencesEditorWidget.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.id = PreferencesEditorWidget_1.ID;
                        this.title.label = PreferencesEditorWidget_1.LABEL;
                        this.addClass('settings-main');
                        this.toDispose.pushAll([
                            this.preferenceService.onPreferencesChanged(function (e) { return _this.handlePreferenceChanges(e); }),
                            this.model.onFilterChanged(function (e) { return _this.handleDisplayChange(e); }),
                            this.model.onSelectionChanged(function (e) { return _this.handleSelectionChange(e); }),
                        ]);
                        this.createContainers();
                        return [4 /*yield*/, this.preferenceService.ready];
                    case 1:
                        _a.sent();
                        this.handleDisplayChange({ source: preference_tree_model_1.PreferenceFilterChangeSource.Schema });
                        return [2 /*return*/];
                }
            });
        });
    };
    PreferencesEditorWidget.prototype.createContainers = function () {
        var innerWrapper = document.createElement('div');
        innerWrapper.classList.add('settings-main-scroll-container');
        this.scrollContainer = innerWrapper;
        innerWrapper.addEventListener('scroll', this.onScroll, { passive: true });
        this.node.appendChild(innerWrapper);
        var noLeavesMessage = document.createElement('div');
        noLeavesMessage.classList.add('settings-no-results-announcement');
        noLeavesMessage.textContent = 'That search query has returned no results.';
        this.node.appendChild(noLeavesMessage);
    };
    PreferencesEditorWidget.prototype.handleDisplayChange = function (e) {
        var isFiltered = this.model.isFiltered;
        var currentFirstVisible = this.firstVisibleChildID;
        var leavesAreVisible = this.areLeavesVisible();
        if (e.source === preference_tree_model_1.PreferenceFilterChangeSource.Search) {
            this.handleSearchChange(isFiltered, leavesAreVisible);
        }
        else if (e.source === preference_tree_model_1.PreferenceFilterChangeSource.Scope) {
            this.handleScopeChange(isFiltered);
        }
        else if (e.source === preference_tree_model_1.PreferenceFilterChangeSource.Schema) {
            this.handleSchemaChange(isFiltered);
        }
        else {
            common_1.unreachable(e.source, 'Not all PreferenceFilterChangeSource enum variants handled.');
        }
        this.resetScroll(currentFirstVisible, e.source === preference_tree_model_1.PreferenceFilterChangeSource.Search && !isFiltered);
    };
    PreferencesEditorWidget.prototype.handleSchemaChange = function (isFiltered) {
        var e_1, _a, e_2, _b;
        var _c;
        try {
            for (var _d = __values(this.allRenderers()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var _f = __read(_e.value, 3), id = _f[0], renderer = _f[1], collection = _f[2];
                if (!this.model.getNode(renderer.nodeId)) {
                    renderer.dispose();
                    collection.delete(id);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.model.root) {
            var nodeIterator = Array.from(this.scrollContainer.children)[Symbol.iterator]();
            var nextNode = nodeIterator.next().value;
            try {
                for (var _g = __values(new browser_1.TopDownTreeIterator(this.model.root)), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var node = _h.value;
                    if (preference_types_1.Preference.TreeNode.is(node)) {
                        var _j = this.analyzeIDAndGetRendererGroup(node.id), collection = _j.collection, id = _j.id;
                        var renderer = (_c = collection.get(id)) !== null && _c !== void 0 ? _c : this.rendererFactory(node);
                        if (!renderer.node.parentElement) { // If it hasn't been attached yet, it hasn't been checked for the current search.
                            this.hideIfFailsFilters(renderer, isFiltered);
                            collection.set(id, renderer);
                        }
                        if (nextNode !== renderer.node) {
                            if (nextNode) {
                                renderer.insertBefore(nextNode);
                            }
                            else {
                                renderer.appendTo(this.scrollContainer);
                            }
                        }
                        else {
                            nextNode = nodeIterator.next().value;
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    PreferencesEditorWidget.prototype.handleScopeChange = function (isFiltered) {
        var e_3, _a;
        var _b;
        if (isFiltered === void 0) { isFiltered = this.model.isFiltered; }
        try {
            for (var _c = __values(this.allRenderers()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), renderer = _e[1];
                var isHidden = this.hideIfFailsFilters(renderer, isFiltered);
                if (isFiltered || !isHidden) {
                    (_b = renderer.handleScopeChange) === null || _b === void 0 ? void 0 : _b.call(renderer, isFiltered);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    PreferencesEditorWidget.prototype.handleSearchChange = function (isFiltered, leavesAreVisible) {
        var e_4, _a;
        var _b;
        if (leavesAreVisible) {
            try {
                for (var _c = __values(this.allRenderers()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read(_d.value, 2), renderer = _e[1];
                    var isHidden = this.hideIfFailsFilters(renderer, isFiltered);
                    if (!isHidden) {
                        (_b = renderer.handleSearchChange) === null || _b === void 0 ? void 0 : _b.call(renderer, isFiltered);
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    PreferencesEditorWidget.prototype.areLeavesVisible = function () {
        var leavesAreVisible = this.model.totalVisibleLeaves > 0;
        this.node.classList.toggle('no-results', !leavesAreVisible);
        this.scrollContainer.classList.toggle('hidden', !leavesAreVisible);
        return leavesAreVisible;
    };
    PreferencesEditorWidget.prototype.allRenderers = function () {
        var _a, _b, _c, id, renderer, e_5_1, _d, _e, _f, id, renderer, e_6_1;
        var e_5, _g, e_6, _h;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _j.trys.push([0, 5, 6, 7]);
                    _a = __values(this.commonlyUsedRenderers.entries()), _b = _a.next();
                    _j.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    _c = __read(_b.value, 2), id = _c[0], renderer = _c[1];
                    return [4 /*yield*/, [id, renderer, this.commonlyUsedRenderers]];
                case 2:
                    _j.sent();
                    _j.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_5_1 = _j.sent();
                    e_5 = { error: e_5_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                    }
                    finally { if (e_5) throw e_5.error; }
                    return [7 /*endfinally*/];
                case 7:
                    _j.trys.push([7, 12, 13, 14]);
                    _d = __values(this.renderers.entries()), _e = _d.next();
                    _j.label = 8;
                case 8:
                    if (!!_e.done) return [3 /*break*/, 11];
                    _f = __read(_e.value, 2), id = _f[0], renderer = _f[1];
                    return [4 /*yield*/, [id, renderer, this.renderers]];
                case 9:
                    _j.sent();
                    _j.label = 10;
                case 10:
                    _e = _d.next();
                    return [3 /*break*/, 8];
                case 11: return [3 /*break*/, 14];
                case 12:
                    e_6_1 = _j.sent();
                    e_6 = { error: e_6_1 };
                    return [3 /*break*/, 14];
                case 13:
                    try {
                        if (_e && !_e.done && (_h = _d.return)) _h.call(_d);
                    }
                    finally { if (e_6) throw e_6.error; }
                    return [7 /*endfinally*/];
                case 14: return [2 /*return*/];
            }
        });
    };
    PreferencesEditorWidget.prototype.handlePreferenceChanges = function (e) {
        var e_7, _a;
        var _b, _c, _d, _e;
        try {
            for (var _f = __values(Object.keys(e)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var id = _g.value;
                (_c = (_b = this.commonlyUsedRenderers.get(id)) === null || _b === void 0 ? void 0 : _b.handleValueChange) === null || _c === void 0 ? void 0 : _c.call(_b);
                (_e = (_d = this.renderers.get(id)) === null || _d === void 0 ? void 0 : _d.handleValueChange) === null || _e === void 0 ? void 0 : _e.call(_d);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_7) throw e_7.error; }
        }
    };
    /**
     * @returns true if the renderer is hidden, false otherwise.
     */
    PreferencesEditorWidget.prototype.hideIfFailsFilters = function (renderer, isFiltered) {
        var row = this.model.currentRows.get(renderer.nodeId);
        if (!row || (browser_1.CompositeTreeNode.is(row.node) && (isFiltered || row.visibleChildren === 0))) {
            renderer.hide();
            return true;
        }
        else {
            renderer.show();
            return false;
        }
    };
    PreferencesEditorWidget.prototype.resetScroll = function (nodeIDToScrollTo, filterWasCleared) {
        var _this = this;
        if (filterWasCleared === void 0) { filterWasCleared = false; }
        if (this.scrollBar) { // Absent on widget creation
            this.doResetScroll(nodeIDToScrollTo, filterWasCleared);
        }
        else {
            var interval_1 = setInterval(function () {
                if (_this.scrollBar) {
                    clearInterval(interval_1);
                    _this.doResetScroll(nodeIDToScrollTo, filterWasCleared);
                }
            }, 500);
        }
    };
    PreferencesEditorWidget.prototype.doResetScroll = function (nodeIDToScrollTo, filterWasCleared) {
        var _this = this;
        if (filterWasCleared === void 0) { filterWasCleared = false; }
        requestAnimationFrame(function () {
            var _a;
            (_a = _this.scrollBar) === null || _a === void 0 ? void 0 : _a.update();
            if (!filterWasCleared && nodeIDToScrollTo) {
                var _b = _this.analyzeIDAndGetRendererGroup(nodeIDToScrollTo), id = _b.id, collection = _b.collection;
                var renderer = collection.get(id);
                if (renderer === null || renderer === void 0 ? void 0 : renderer.visible) {
                    renderer.node.scrollIntoView();
                    return;
                }
            }
            _this.scrollContainer.scrollTop = 0;
        });
    };
    ;
    PreferencesEditorWidget.prototype.doOnScroll = function () {
        var scrollContainer = this.scrollContainer;
        var firstVisibleChildID = this.findFirstVisibleChildID();
        this.setFirstVisibleChildID(firstVisibleChildID);
        if (this.isAtScrollTop && scrollContainer.scrollTop !== 0) {
            this.isAtScrollTop = false;
            this.tabbar.toggleShadow(true);
        }
        else if (!this.isAtScrollTop && scrollContainer.scrollTop === 0) {
            this.isAtScrollTop = true;
            this.tabbar.toggleShadow(false);
        }
    };
    ;
    PreferencesEditorWidget.prototype.findFirstVisibleChildID = function () {
        var e_8, _a;
        var scrollTop = this.scrollContainer.scrollTop;
        try {
            for (var _b = __values(this.allRenderers()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), renderer = _d[1];
                var _e = renderer.node, offsetTop = _e.offsetTop, offsetHeight = _e.offsetHeight;
                if (Math.abs(offsetTop - scrollTop) <= offsetHeight / 2) {
                    return renderer.nodeId;
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
    };
    PreferencesEditorWidget.prototype.setFirstVisibleChildID = function (id) {
        if (id && id !== this.firstVisibleChildID) {
            this.firstVisibleChildID = id;
            var currentNode = this.model.getNode(id);
            var expansionAncestor = void 0;
            var selectionAncestor = void 0;
            while (currentNode && (!expansionAncestor || !selectionAncestor)) {
                if (!selectionAncestor && browser_1.SelectableTreeNode.is(currentNode)) {
                    selectionAncestor = currentNode;
                }
                if (!expansionAncestor && browser_1.ExpandableTreeNode.is(currentNode)) {
                    expansionAncestor = currentNode;
                }
                currentNode = currentNode.parent;
            }
            if (selectionAncestor) {
                this.currentModelSelectionId = selectionAncestor.id;
                expansionAncestor = expansionAncestor !== null && expansionAncestor !== void 0 ? expansionAncestor : selectionAncestor;
                this.model.selectIfNotSelected(selectionAncestor);
                if (!this.model.isFiltered && id !== this.lastUserSelection) {
                    this.lastUserSelection = '';
                    this.model.collapseAllExcept(expansionAncestor);
                }
            }
        }
    };
    PreferencesEditorWidget.prototype.handleSelectionChange = function (selectionEvent) {
        var e_9, _a;
        var node = selectionEvent[0];
        if (node && node.id !== this.currentModelSelectionId) {
            this.currentModelSelectionId = node.id;
            this.lastUserSelection = node.id;
            if (this.model.isFiltered && browser_1.CompositeTreeNode.is(node)) {
                try {
                    for (var _b = __values(new browser_1.TopDownTreeIterator(node, { pruneSiblings: true })), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var candidate = _c.value;
                        var _d = this.analyzeIDAndGetRendererGroup(candidate.id), id = _d.id, collection = _d.collection;
                        var renderer = collection.get(id);
                        if (renderer === null || renderer === void 0 ? void 0 : renderer.visible) {
                            // When filtered, treat the first visible child as the selected node, since it will be the one scrolled to.
                            this.lastUserSelection = renderer.nodeId;
                            renderer.node.scrollIntoView();
                            return;
                        }
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
            }
            else {
                var _e = this.analyzeIDAndGetRendererGroup(node.id), id = _e.id, collection = _e.collection;
                var renderer = collection.get(id);
                renderer === null || renderer === void 0 ? void 0 : renderer.node.scrollIntoView();
            }
        }
    };
    PreferencesEditorWidget.prototype.analyzeIDAndGetRendererGroup = function (nodeID) {
        var _a = preference_types_1.Preference.TreeNode.getGroupAndIdFromNodeId(nodeID), id = _a.id, group = _a.group;
        var collection = group === preference_tree_generator_1.COMMONLY_USED_SECTION_PREFIX ? this.commonlyUsedRenderers : this.renderers;
        return { id: id, group: group, collection: collection };
    };
    PreferencesEditorWidget.prototype.getScrollContainer = function () {
        return this.scrollContainer;
    };
    PreferencesEditorWidget.prototype.storeState = function () {
        return {
            firstVisibleChildID: this.firstVisibleChildID,
        };
    };
    PreferencesEditorWidget.prototype.restoreState = function (oldState) {
        this.firstVisibleChildID = oldState.firstVisibleChildID;
        this.resetScroll(this.firstVisibleChildID);
    };
    var PreferencesEditorWidget_1;
    PreferencesEditorWidget.ID = 'settings.editor';
    PreferencesEditorWidget.LABEL = 'Settings Editor';
    __decorate([
        inversify_1.inject(browser_1.PreferenceService),
        __metadata("design:type", Object)
    ], PreferencesEditorWidget.prototype, "preferenceService", void 0);
    __decorate([
        inversify_1.inject(preference_tree_model_1.PreferenceTreeModel),
        __metadata("design:type", preference_tree_model_1.PreferenceTreeModel)
    ], PreferencesEditorWidget.prototype, "model", void 0);
    __decorate([
        inversify_1.inject(preference_node_renderer_1.PreferenceNodeRendererFactory),
        __metadata("design:type", Function)
    ], PreferencesEditorWidget.prototype, "rendererFactory", void 0);
    __decorate([
        inversify_1.inject(preference_scope_tabbar_widget_1.PreferencesScopeTabBar),
        __metadata("design:type", preference_scope_tabbar_widget_1.PreferencesScopeTabBar)
    ], PreferencesEditorWidget.prototype, "tabbar", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], PreferencesEditorWidget.prototype, "init", null);
    PreferencesEditorWidget = PreferencesEditorWidget_1 = __decorate([
        inversify_1.injectable()
    ], PreferencesEditorWidget);
    return PreferencesEditorWidget;
}(widget_1.BaseWidget));
exports.PreferencesEditorWidget = PreferencesEditorWidget;
//# sourceMappingURL=preference-editor-widget.js.map