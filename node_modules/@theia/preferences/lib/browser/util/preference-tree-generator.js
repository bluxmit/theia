"use strict";
/********************************************************************************
 * Copyright (C) 2020 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceTreeGenerator = exports.COMMONLY_USED_SECTION_PREFIX = void 0;
var inversify_1 = require("@theia/core/shared/inversify");
var browser_1 = require("@theia/core/lib/browser");
var preference_configurations_1 = require("@theia/core/lib/browser/preferences/preference-configurations");
var core_1 = require("@theia/core");
var debounce = require("@theia/core/shared/lodash.debounce");
var preference_types_1 = require("./preference-types");
exports.COMMONLY_USED_SECTION_PREFIX = 'commonly-used';
var PreferenceTreeGenerator = /** @class */ (function () {
    function PreferenceTreeGenerator() {
        this.onSchemaChangedEmitter = new core_1.Emitter();
        this.onSchemaChanged = this.onSchemaChangedEmitter.event;
        this.commonlyUsedPreferences = [
            'editor.autoSave', 'editor.autoSaveDelay', 'editor.fontSize',
            'editor.fontFamily', 'editor.tabSize', 'editor.renderWhitespace',
            'editor.cursorStyle', 'editor.multiCursorModifier', 'editor.insertSpaces',
            'editor.wordWrap', 'files.exclude', 'files.associations'
        ];
        this.topLevelCategories = new Map([
            [exports.COMMONLY_USED_SECTION_PREFIX, 'Commonly Used'],
            ['editor', 'Text Editor'],
            ['workbench', 'Workbench'],
            ['window', 'Window'],
            ['features', 'Features'],
            ['application', 'Application'],
            ['extensions', 'Extensions']
        ]);
        this.sectionAssignments = new Map([
            ['comments', 'features'],
            ['debug', 'features'],
            ['diffEditor', 'editor'],
            ['explorer', 'features'],
            ['extensions', 'features'],
            ['files', 'editor'],
            ['hosted-plugin', 'features'],
            ['keyboard', 'application'],
            ['output', 'features'],
            ['problems', 'features'],
            ['preview', 'features'],
            ['search', 'features'],
            ['task', 'features'],
            ['terminal', 'features'],
            ['webview', 'features'],
            ['workspace', 'application'],
        ]);
        this.defaultTopLevelCategory = 'extensions';
        this.handleChangedSchema = debounce(this.doHandleChangedSchema, 200);
    }
    Object.defineProperty(PreferenceTreeGenerator.prototype, "root", {
        get: function () {
            var _a;
            return (_a = this._root) !== null && _a !== void 0 ? _a : this.generateTree();
        },
        enumerable: false,
        configurable: true
    });
    PreferenceTreeGenerator.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.schemaProvider.ready];
                    case 1:
                        _a.sent();
                        this.schemaProvider.onDidPreferenceSchemaChanged(function () { return _this.handleChangedSchema(); });
                        this.handleChangedSchema();
                        return [2 /*return*/];
                }
            });
        });
    };
    PreferenceTreeGenerator.prototype.generateTree = function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        var preferencesSchema = this.schemaProvider.getCombinedSchema();
        var propertyNames = Object.keys(preferencesSchema.properties);
        var groups = new Map();
        var root = this.createRootNode();
        try {
            for (var _e = __values(this.topLevelCategories.keys()), _f = _e.next(); !_f.done; _f = _e.next()) {
                var id = _f.value;
                this.getOrCreatePreferencesGroup(id, id, root, groups);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var commonlyUsed = this.getOrCreatePreferencesGroup(exports.COMMONLY_USED_SECTION_PREFIX, exports.COMMONLY_USED_SECTION_PREFIX, root, groups);
        try {
            for (var _g = __values(this.commonlyUsedPreferences), _h = _g.next(); !_h.done; _h = _g.next()) {
                var preference = _h.value;
                if (preference in preferencesSchema.properties) {
                    this.createLeafNode(preference, commonlyUsed, preferencesSchema.properties[preference]);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var propertyNames_1 = __values(propertyNames), propertyNames_1_1 = propertyNames_1.next(); !propertyNames_1_1.done; propertyNames_1_1 = propertyNames_1.next()) {
                var propertyName = propertyNames_1_1.value;
                if (!this.preferenceConfigs.isSectionName(propertyName) && !browser_1.OVERRIDE_PROPERTY_PATTERN.test(propertyName)) {
                    var labels = propertyName.split('.');
                    var groupID = this.getGroupName(labels);
                    var subgroupName = this.getSubgroupName(labels, groupID);
                    var subgroupID = [groupID, subgroupName].join('.');
                    var toplevelParent = this.getOrCreatePreferencesGroup(groupID, groupID, root, groups);
                    var immediateParent = subgroupName && this.getOrCreatePreferencesGroup(subgroupID, groupID, toplevelParent, groups);
                    this.createLeafNode(propertyName, immediateParent || toplevelParent, preferencesSchema.properties[propertyName]);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (propertyNames_1_1 && !propertyNames_1_1.done && (_c = propertyNames_1.return)) _c.call(propertyNames_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _j = __values(groups.values()), _k = _j.next(); !_k.done; _k = _j.next()) {
                var group = _k.value;
                if (group.id !== exports.COMMONLY_USED_SECTION_PREFIX + "@" + exports.COMMONLY_USED_SECTION_PREFIX) {
                    group.children.sort(function (a, b) {
                        var aIsComposite = browser_1.CompositeTreeNode.is(a);
                        var bIsComposite = browser_1.CompositeTreeNode.is(b);
                        if (aIsComposite && !bIsComposite) {
                            return 1;
                        }
                        if (bIsComposite && !aIsComposite) {
                            return -1;
                        }
                        return a.id.localeCompare(b.id);
                    });
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_d = _j.return)) _d.call(_j);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this._root = root;
        return root;
    };
    ;
    PreferenceTreeGenerator.prototype.getGroupName = function (labels) {
        var defaultGroup = labels[0];
        if (this.topLevelCategories.has(defaultGroup)) {
            return defaultGroup;
        }
        var assignedGroup = this.sectionAssignments.get(defaultGroup);
        if (assignedGroup) {
            return assignedGroup;
        }
        return this.defaultTopLevelCategory;
    };
    PreferenceTreeGenerator.prototype.getSubgroupName = function (labels, computedGroupName) {
        if (computedGroupName !== labels[0]) {
            return labels[0];
        }
        else if (labels.length > 2) {
            return labels[1];
        }
    };
    PreferenceTreeGenerator.prototype.doHandleChangedSchema = function () {
        var newTree = this.generateTree();
        this.onSchemaChangedEmitter.fire(newTree);
    };
    PreferenceTreeGenerator.prototype.createRootNode = function () {
        return {
            id: 'root-node-id',
            name: '',
            parent: undefined,
            visible: true,
            children: []
        };
    };
    PreferenceTreeGenerator.prototype.createLeafNode = function (property, preferencesGroup, data) {
        var group = preference_types_1.Preference.TreeNode.getGroupAndIdFromNodeId(preferencesGroup.id).group;
        var newNode = {
            id: group + "@" + property,
            preferenceId: property,
            parent: preferencesGroup,
            visible: true,
            preference: { data: data },
            depth: preference_types_1.Preference.TreeNode.isTopLevel(preferencesGroup) ? 1 : 2,
        };
        browser_1.CompositeTreeNode.addChild(preferencesGroup, newNode);
        return newNode;
    };
    PreferenceTreeGenerator.prototype.createPreferencesGroup = function (id, group, root) {
        var newNode = {
            id: group + "@" + id,
            visible: true,
            parent: root,
            children: [],
            expanded: false,
            selected: false,
            depth: 0,
        };
        var isTopLevel = preference_types_1.Preference.TreeNode.isTopLevel(newNode);
        if (!isTopLevel) {
            delete newNode.expanded;
        }
        newNode.depth = isTopLevel ? 0 : 1;
        browser_1.CompositeTreeNode.addChild(root, newNode);
        return newNode;
    };
    PreferenceTreeGenerator.prototype.getCustomLabelFor = function (id) {
        return this.topLevelCategories.get(id);
    };
    PreferenceTreeGenerator.prototype.getOrCreatePreferencesGroup = function (id, group, root, groups) {
        var existingGroup = groups.get(id);
        if (existingGroup) {
            return existingGroup;
        }
        var newNode = this.createPreferencesGroup(id, group, root);
        groups.set(id, newNode);
        return newNode;
    };
    ;
    __decorate([
        inversify_1.inject(browser_1.PreferenceSchemaProvider),
        __metadata("design:type", browser_1.PreferenceSchemaProvider)
    ], PreferenceTreeGenerator.prototype, "schemaProvider", void 0);
    __decorate([
        inversify_1.inject(preference_configurations_1.PreferenceConfigurations),
        __metadata("design:type", preference_configurations_1.PreferenceConfigurations)
    ], PreferenceTreeGenerator.prototype, "preferenceConfigs", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], PreferenceTreeGenerator.prototype, "init", null);
    PreferenceTreeGenerator = __decorate([
        inversify_1.injectable()
    ], PreferenceTreeGenerator);
    return PreferenceTreeGenerator;
}());
exports.PreferenceTreeGenerator = PreferenceTreeGenerator;
//# sourceMappingURL=preference-tree-generator.js.map