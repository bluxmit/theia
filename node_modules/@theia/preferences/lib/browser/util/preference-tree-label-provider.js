"use strict";
/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceTreeLabelProvider = void 0;
var inversify_1 = require("@theia/core/shared/inversify");
var browser_1 = require("@theia/core/lib/browser");
var preference_types_1 = require("./preference-types");
var preference_tree_generator_1 = require("./preference-tree-generator");
var PreferenceTreeLabelProvider = /** @class */ (function () {
    function PreferenceTreeLabelProvider() {
    }
    PreferenceTreeLabelProvider.prototype.canHandle = function (element) {
        return browser_1.TreeNode.is(element) && preference_types_1.Preference.TreeNode.is(element) ? 150 : 0;
    };
    PreferenceTreeLabelProvider.prototype.getName = function (node) {
        var _a;
        var id = preference_types_1.Preference.TreeNode.getGroupAndIdFromNodeId(node.id).id;
        return this.formatString((_a = this.treeGenerator.getCustomLabelFor(id)) !== null && _a !== void 0 ? _a : id.split('.').pop());
    };
    PreferenceTreeLabelProvider.prototype.getPrefix = function (node, fullPath) {
        var e_1, _a;
        if (fullPath === void 0) { fullPath = false; }
        var depth = node.depth;
        var _b = preference_types_1.Preference.TreeNode.getGroupAndIdFromNodeId(node.id), id = _b.id, group = _b.group;
        var segments = id.split('.');
        var segmentsHandled = group === segments[0] ? depth : depth - 1;
        segments.pop(); // Ignore the leaf name.
        var prefixSegments = fullPath ? segments : segments.slice(segmentsHandled);
        if (prefixSegments.length) {
            var output = prefixSegments.length > 1 ? this.formatString(prefixSegments[0]) + " \u203A " : this.formatString(prefixSegments[0]) + ": ";
            try {
                for (var _c = __values(prefixSegments.slice(1)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var segment = _d.value;
                    output += this.formatString(segment) + ": ";
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return output;
        }
    };
    PreferenceTreeLabelProvider.prototype.formatString = function (string) {
        var formatedString = string[0].toLocaleUpperCase();
        for (var i = 1; i < string.length; i++) {
            if (this.isUpperCase(string[i]) && !/\s/.test(string[i - 1]) && !this.isUpperCase(string[i - 1])) {
                formatedString += ' ';
            }
            formatedString += string[i];
        }
        return formatedString.trim();
    };
    PreferenceTreeLabelProvider.prototype.isUpperCase = function (char) {
        return char === char.toLocaleUpperCase() && char.toLocaleLowerCase() !== char.toLocaleUpperCase();
    };
    __decorate([
        inversify_1.inject(preference_tree_generator_1.PreferenceTreeGenerator),
        __metadata("design:type", preference_tree_generator_1.PreferenceTreeGenerator)
    ], PreferenceTreeLabelProvider.prototype, "treeGenerator", void 0);
    PreferenceTreeLabelProvider = __decorate([
        inversify_1.injectable()
    ], PreferenceTreeLabelProvider);
    return PreferenceTreeLabelProvider;
}());
exports.PreferenceTreeLabelProvider = PreferenceTreeLabelProvider;
//# sourceMappingURL=preference-tree-label-provider.js.map