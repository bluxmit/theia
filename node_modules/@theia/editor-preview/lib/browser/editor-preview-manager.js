"use strict";
/********************************************************************************
 * Copyright (C) 2018-2021 Google and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorPreviewManager = void 0;
var browser_1 = require("@theia/editor/lib/browser");
var inversify_1 = require("@theia/core/shared/inversify");
var editor_preview_preferences_1 = require("./editor-preview-preferences");
var common_1 = require("@theia/core/lib/common");
var editor_preview_widget_factory_1 = require("./editor-preview-widget-factory");
var frontend_application_state_1 = require("@theia/core/lib/browser/frontend-application-state");
var EditorPreviewManager = /** @class */ (function (_super) {
    __extends(EditorPreviewManager, _super);
    function EditorPreviewManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = editor_preview_widget_factory_1.EditorPreviewWidgetFactory.ID;
        _this.toDisposeOnPreviewChange = new common_1.DisposableCollection();
        /**
         * Until the layout has been restored, widget state is not reliable, so we ignore creation events.
         */
        _this.layoutIsSet = false;
        return _this;
    }
    EditorPreviewManager.prototype.init = function () {
        var _this = this;
        _super.prototype.init.call(this);
        // All editors are created, but not all are opened. This sets up the logic to swap previews when the editor is attached.
        this.onCreated(function (widget) {
            if (_this.layoutIsSet && widget.isPreview) {
                var oneTimeDisposable_1 = widget.onDidChangeVisibility(function () {
                    var currentPreview = _this.currentPreview;
                    _this.handleNewPreview(widget);
                    currentPreview === null || currentPreview === void 0 ? void 0 : currentPreview.dispose();
                    oneTimeDisposable_1.dispose();
                });
            }
        });
        this.preferences.onPreferenceChanged(function (change) {
            var _a;
            if (!change.newValue) {
                (_a = _this.currentPreview) === null || _a === void 0 ? void 0 : _a.convertToNonPreview();
            }
            ;
        });
        this.stateService.reachedState('initialized_layout').then(function () {
            var editors = _this.all;
            var currentPreview = editors.find(function (editor) { return editor.isPreview; });
            if (currentPreview) {
                _this.handleNewPreview(currentPreview);
            }
            _this.layoutIsSet = true;
        });
        document.addEventListener('dblclick', this.convertEditorOnDoubleClick.bind(this));
    };
    EditorPreviewManager.prototype.doOpen = function (widget, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, preview, _b, widgetOptions, _c, mode, insertionOptions;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = options !== null && options !== void 0 ? options : {}, preview = _a.preview, _b = _a.widgetOptions, widgetOptions = _b === void 0 ? { area: 'main' } : _b, _c = _a.mode, mode = _c === void 0 ? 'activate' : _c;
                        if (!!widget.isAttached) return [3 /*break*/, 4];
                        if (!preview) return [3 /*break*/, 2];
                        insertionOptions = this.currentPreview ? { ref: this.currentPreview } : widgetOptions;
                        return [4 /*yield*/, this.shell.addWidget(widget, insertionOptions)];
                    case 1:
                        _d.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.shell.addWidget(widget, widgetOptions);
                        _d.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        if (!preview && widget === this.currentPreview) {
                            widget.convertToNonPreview();
                        }
                        _d.label = 5;
                    case 5:
                        if (!(mode === 'activate')) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.shell.activateWidget(widget.id)];
                    case 6:
                        _d.sent();
                        return [3 /*break*/, 9];
                    case 7:
                        if (!(mode === 'reveal')) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.shell.revealWidget(widget.id)];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    EditorPreviewManager.prototype.handleNewPreview = function (widget) {
        var _this = this;
        this.toDisposeOnPreviewChange.dispose();
        this.currentPreview = widget;
        this.toDisposeOnPreviewChange.push({ dispose: function () { return _this.currentPreview = undefined; } });
        this.toDisposeOnPreviewChange.push(widget.onDidChangePreviewState(function () { return _this.toDisposeOnPreviewChange.dispose(); }));
        this.toDisposeOnPreviewChange.push(widget.onDidDispose(function () { return _this.toDisposeOnPreviewChange.dispose(); }));
    };
    EditorPreviewManager.prototype.tryGetPendingWidget = function (uri, options) {
        var _a;
        return (_a = _super.prototype.tryGetPendingWidget.call(this, uri, __assign(__assign({}, options), { preview: true }))) !== null && _a !== void 0 ? _a : _super.prototype.tryGetPendingWidget.call(this, uri, __assign(__assign({}, options), { preview: false }));
    };
    EditorPreviewManager.prototype.getWidget = function (uri, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, _super.prototype.getWidget.call(this, uri, __assign(__assign({}, options), { preview: true }))];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) !== null && _a !== void 0 ? _a : _super.prototype.getWidget.call(this, uri, __assign(__assign({}, options), { preview: false }))];
                }
            });
        });
    };
    EditorPreviewManager.prototype.getOrCreateWidget = function (uri, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, (_a = this.tryGetPendingWidget(uri, options)) !== null && _a !== void 0 ? _a : _super.prototype.getOrCreateWidget.call(this, uri, options)];
            });
        });
    };
    EditorPreviewManager.prototype.createWidgetOptions = function (uri, options) {
        var navigatableOptions = _super.prototype.createWidgetOptions.call(this, uri, options);
        navigatableOptions.preview = !!((options === null || options === void 0 ? void 0 : options.preview) && this.preferences['editor.enablePreview']);
        return navigatableOptions;
    };
    EditorPreviewManager.prototype.convertEditorOnDoubleClick = function (event) {
        var _a;
        var widget = this.shell.findTargetedWidget(event);
        if (widget === this.currentPreview) {
            (_a = this.currentPreview) === null || _a === void 0 ? void 0 : _a.convertToNonPreview();
        }
    };
    __decorate([
        inversify_1.inject(editor_preview_preferences_1.EditorPreviewPreferences),
        __metadata("design:type", Object)
    ], EditorPreviewManager.prototype, "preferences", void 0);
    __decorate([
        inversify_1.inject(frontend_application_state_1.FrontendApplicationStateService),
        __metadata("design:type", frontend_application_state_1.FrontendApplicationStateService)
    ], EditorPreviewManager.prototype, "stateService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], EditorPreviewManager.prototype, "init", null);
    EditorPreviewManager = __decorate([
        inversify_1.injectable()
    ], EditorPreviewManager);
    return EditorPreviewManager;
}(browser_1.EditorManager));
exports.EditorPreviewManager = EditorPreviewManager;
//# sourceMappingURL=editor-preview-manager.js.map