"use strict";
/********************************************************************************
 * Copyright (C) 2021 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditorPreviewWidget = void 0;
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var common_1 = require("@theia/core/lib/common");
var algorithm_1 = require("@theia/core/shared/@phosphor/algorithm");
var PREVIEW_TITLE_CLASS = 'theia-editor-preview-title-unpinned';
var EditorPreviewWidget = /** @class */ (function (_super) {
    __extends(EditorPreviewWidget, _super);
    function EditorPreviewWidget(editor, selectionService) {
        var _this = _super.call(this, editor, selectionService) || this;
        _this.editor = editor;
        _this.selectionService = selectionService;
        _this._isPreview = false;
        _this.onDidChangePreviewStateEmitter = new common_1.Emitter();
        _this.onDidChangePreviewState = _this.onDidChangePreviewStateEmitter.event;
        _this.toDisposeOnLocationChange = new common_1.DisposableCollection();
        _this.toDispose.push(_this.onDidChangePreviewStateEmitter);
        _this.toDispose.push(_this.toDisposeOnLocationChange);
        return _this;
    }
    Object.defineProperty(EditorPreviewWidget.prototype, "isPreview", {
        get: function () {
            return this._isPreview;
        },
        enumerable: false,
        configurable: true
    });
    EditorPreviewWidget.prototype.initializePreview = function () {
        var _this = this;
        this._isPreview = true;
        this.title.className += " " + PREVIEW_TITLE_CLASS;
        var oneTimeDirtyChangeListener = this.saveable.onDirtyChanged(function () {
            _this.convertToNonPreview();
            oneTimeDirtyChangeListener.dispose();
        });
        this.toDispose.push(oneTimeDirtyChangeListener);
    };
    EditorPreviewWidget.prototype.convertToNonPreview = function () {
        if (this._isPreview) {
            this._isPreview = false;
            this.toDisposeOnLocationChange.dispose();
            this.lastTabbar = undefined;
            this.title.className = this.title.className.replace(PREVIEW_TITLE_CLASS, '');
            this.onDidChangePreviewStateEmitter.fire();
            this.onDidChangePreviewStateEmitter.dispose();
        }
    };
    EditorPreviewWidget.prototype.onAfterAttach = function (msg) {
        _super.prototype.onAfterAttach.call(this, msg);
        if (this._isPreview) {
            this.checkForTabbarChange();
        }
    };
    EditorPreviewWidget.prototype.checkForTabbarChange = function () {
        var _this = this;
        var parent = this.parent;
        if (parent instanceof browser_1.DockPanel) {
            this.toDisposeOnLocationChange.dispose();
            var newTabbar = algorithm_1.find(parent.tabBars(), function (tabbar) { return !!tabbar.titles.find(function (title) { return title === _this.title; }); });
            if (this.lastTabbar && this.lastTabbar !== newTabbar) {
                this.convertToNonPreview();
            }
            else {
                this.lastTabbar = newTabbar;
                var listener_1 = function () { return _this.checkForTabbarChange(); };
                parent.layoutModified.connect(listener_1);
                this.toDisposeOnLocationChange.push(common_1.Disposable.create(function () { return parent.layoutModified.disconnect(listener_1); }));
            }
        }
    };
    EditorPreviewWidget.prototype.storeState = function () {
        var isPreview = this._isPreview;
        return { isPreview: isPreview, editorState: this.editor.storeViewState() };
    };
    EditorPreviewWidget.prototype.restoreState = function (oldState) {
        if (!oldState.isPreview) {
            this.convertToNonPreview();
        }
        this.editor.restoreViewState(oldState.editorState);
    };
    return EditorPreviewWidget;
}(browser_2.EditorWidget));
exports.EditorPreviewWidget = EditorPreviewWidget;
//# sourceMappingURL=editor-preview-widget.js.map